[{"H:\\Bootcamp_2020\\quiz-app\\src\\index.tsx":"1","H:\\Bootcamp_2020\\quiz-app\\src\\reportWebVitals.ts":"2","H:\\Bootcamp_2020\\quiz-app\\src\\App.tsx":"3","H:\\Bootcamp_2020\\quiz-app\\src\\theme.ts":"4","H:\\Bootcamp_2020\\quiz-app\\src\\Views\\Home\\index.tsx":"5","H:\\Bootcamp_2020\\quiz-app\\src\\Views\\Home\\styles.tsx":"6","H:\\Bootcamp_2020\\quiz-app\\src\\Components\\Dropdown\\index.tsx":"7","H:\\Bootcamp_2020\\quiz-app\\src\\Views\\Quiz\\index.tsx":"8","H:\\Bootcamp_2020\\quiz-app\\src\\Views\\Quiz\\styles.tsx":"9","H:\\Bootcamp_2020\\quiz-app\\src\\Components\\QuizModal\\index.tsx":"10","H:\\Bootcamp_2020\\quiz-app\\src\\Components\\QuizModal\\styles.tsx":"11","H:\\Bootcamp_2020\\quiz-app\\src\\Components\\QuizModal\\SingleOption\\index.tsx":"12","H:\\Bootcamp_2020\\quiz-app\\src\\serviceWorkerRegistration.ts":"13","H:\\Bootcamp_2020\\quiz-app\\src\\Services\\firebaseService.ts":"14"},{"size":748,"mtime":1609269345303,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":511,"mtime":1609088140735,"results":"18","hashOfConfig":"16"},{"size":2364,"mtime":1609171184532,"results":"19","hashOfConfig":"16"},{"size":4827,"mtime":1609333008035,"results":"20","hashOfConfig":"16"},{"size":948,"mtime":1609145087309,"results":"21","hashOfConfig":"16"},{"size":1310,"mtime":1609240003761,"results":"22","hashOfConfig":"16"},{"size":2085,"mtime":1609239896336,"results":"23","hashOfConfig":"16"},{"size":1166,"mtime":1609100707782,"results":"24","hashOfConfig":"16"},{"size":4042,"mtime":1609261050833,"results":"25","hashOfConfig":"16"},{"size":1152,"mtime":1609253844169,"results":"26","hashOfConfig":"16"},{"size":1445,"mtime":1609253849051,"results":"27","hashOfConfig":"16"},{"size":5370,"mtime":1609320998251,"results":"28","hashOfConfig":"16"},{"size":1418,"mtime":1609338877994,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1wk6jxz",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\Bootcamp_2020\\quiz-app\\src\\index.tsx",[],["62","63"],"H:\\Bootcamp_2020\\quiz-app\\src\\reportWebVitals.ts",[],"H:\\Bootcamp_2020\\quiz-app\\src\\App.tsx",[],"H:\\Bootcamp_2020\\quiz-app\\src\\theme.ts",[],"H:\\Bootcamp_2020\\quiz-app\\src\\Views\\Home\\index.tsx",[],"H:\\Bootcamp_2020\\quiz-app\\src\\Views\\Home\\styles.tsx",[],"H:\\Bootcamp_2020\\quiz-app\\src\\Components\\Dropdown\\index.tsx",["64"],"import { Grid, TextField } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { Options, DropdownProps } from \"../../Types/index\";\r\n\r\nconst isOptions = (data: Array<any>): boolean => {\r\n  if (typeof data[0] === \"object\") {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\nconst Index: React.FC<DropdownProps> = ({\r\n  data,\r\n  label,\r\n  selectionChangeHandler,\r\n}) => {\r\n  const onSelectionChange = (e: React.ChangeEvent<{}>, value: any) => {\r\n    selectionChangeHandler(label, value);\r\n  };\r\n  return (\r\n    <>\r\n      <Grid item container style={{ marginTop: \"2%\" }} justify=\"center\" xs={12}>\r\n        <Grid item xs={6} sm={4} lg={3}>\r\n          <Autocomplete\r\n            id=\"select-on-focus\"\r\n            onChange={onSelectionChange}\r\n            disableClearable\r\n            getOptionLabel={(options): any => {\r\n              if (isOptions(data)) {\r\n                return options.title;\r\n              } else {\r\n                return options;\r\n              }\r\n            }}\r\n            fullWidth={true}\r\n            options={data as any}\r\n            selectOnFocus\r\n            renderInput={(params) => <TextField {...params} label={label} />}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","H:\\Bootcamp_2020\\quiz-app\\src\\Views\\Quiz\\index.tsx",["65"],"import { Box, Grid, Typography } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport styles from \"./styles\";\r\nimport QuizModal from \"../../Components/QuizModal/index\";\r\nimport { Questions } from \"../../Types/index\";\r\ninterface Props {\r\n  history: any;\r\n}\r\n\r\nconst Index: React.FC<Props> = ({ history }) => {\r\n  const classes = styles();\r\n  const [name, setName] = useState<string>();\r\n  const [questions, setQuestions] = useState<Array<Questions>>();\r\n  const fetchQuestions = async (url: string) => {\r\n    try {\r\n      const data = await (await fetch(url)).json();\r\n      setQuestions(data.results);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!history.location.state) {\r\n      history.push(\"/\");\r\n    } else {\r\n      const { name, topic, difficulty } = history.location.state;\r\n      setName(name);\r\n      const difficultyParam = difficulty ? `&difficulty=${difficulty}` : \"\";\r\n      const topicParam = topic && topic !== \"any\" ? `&category=${topic}` : \"\";\r\n      const url = `https://opentdb.com/api.php?amount=10&type=multiple${difficultyParam}${topicParam}&encode=base64`;\r\n      console.log(url);\r\n      fetchQuestions(url);\r\n    }\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Box className={classes.root}>\r\n        <div\r\n          className={classes.upperCircle}\r\n          onClick={() => {\r\n            console.log(questions);\r\n          }}\r\n        ></div>\r\n        <div className={classes.lowerCircle}></div>\r\n        <Grid container item xs={12} className={classes.containerRoot}>\r\n          <Grid\r\n            item\r\n            container\r\n            xs={4}\r\n            className={classes.textContainer}\r\n            justify=\"flex-end\"\r\n          >\r\n            <Typography variant=\"h1\">Welcome</Typography>\r\n            <Typography variant=\"h6\">{name}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid xs={12} item container justify=\"center\">\r\n          {questions && <QuizModal questions={questions} />}\r\n        </Grid>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","H:\\Bootcamp_2020\\quiz-app\\src\\Views\\Quiz\\styles.tsx",[],"H:\\Bootcamp_2020\\quiz-app\\src\\Components\\QuizModal\\index.tsx",["66","67","68","69","70"],"import { Box, Grid, Typography } from \"@material-ui/core\";\r\nimport {\r\n  CSSTransition,\r\n  SwitchTransition,\r\n  Transition,\r\n  TransitionGroup,\r\n} from \"react-transition-group\";\r\nimport React, { ReactNode, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport styles from \"./styles\";\r\nimport { Base64 } from \"js-base64\";\r\nimport SingleOption from \"./SingleOption/index\";\r\nimport { QuizModalProps } from \"../../Types/index\";\r\n\r\nconst Index: React.FC<QuizModalProps> = ({ questions }) => {\r\n  const firstUpdate = useRef(true);\r\n  const [currentQuestion, setCurrentQuestion] = useState<number>(0);\r\n  const [pickedAnswer, setPickedAnswer] = useState<string>();\r\n  const [result, setResult] = useState<number>(0);\r\n  const [testComplete, setTestComplete] = useState<boolean>(false);\r\n\r\n  const classes = styles();\r\n  useEffect(() => {\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false;\r\n      return;\r\n    }\r\n    console.log(currentQuestion, questions.length - 1);\r\n    if (currentQuestion == questions.length - 1) {\r\n      setTestComplete(true);\r\n      return;\r\n    }\r\n    const originalAnswer = Base64.decode(\r\n      questions[currentQuestion].correct_answer\r\n    ) as string;\r\n\r\n    if (originalAnswer === pickedAnswer) {\r\n      setResult((prev) => prev + 1);\r\n    }\r\n    setCurrentQuestion((prev) => prev + 1);\r\n  }, [pickedAnswer]);\r\n  const handleAnswerPicked = (answer: string) => {\r\n    setPickedAnswer(answer);\r\n  };\r\n  const shuffleArray = (correct: string, incorrect: Array<string>) => {\r\n    const tempArray: Array<string> = new Array(incorrect.length + 1).fill(\"\");\r\n    const x = [...incorrect];\r\n    //1.9 == 1\r\n    const correctAnswerPos = Math.floor(Math.random() * incorrect.length + 1);\r\n    const shuffled = tempArray.map((val, i) => {\r\n      if (i === correctAnswerPos) {\r\n        return correct;\r\n      } else {\r\n        return x.pop();\r\n      }\r\n    });\r\n    return shuffled;\r\n  };\r\n  const renderedQuestions: Array<ReactNode> | undefined = useMemo(\r\n    () =>\r\n      questions?.map((val, i) => {\r\n        const shuffeledArray = shuffleArray(\r\n          val.correct_answer,\r\n          val.incorrect_answers\r\n        );\r\n        return (\r\n          <>\r\n            <Grid item key={i} className={classes.heading}>\r\n              <Typography variant=\"subtitle1\">\r\n                {Base64.decode(val.question)}\r\n              </Typography>\r\n            </Grid>\r\n            {shuffeledArray.map((valx, i2) => {\r\n              // console.log(valx, j++);\r\n              const decoded = Base64.decode(valx as string);\r\n              return (\r\n                <SingleOption\r\n                  handleAnswerPicked={handleAnswerPicked}\r\n                  key={i2}\r\n                  option={decoded}\r\n                />\r\n              );\r\n            })}\r\n          </>\r\n        );\r\n      }),\r\n    [questions]\r\n  );\r\n  return (\r\n    <>\r\n      <TransitionGroup component={null}>\r\n        <CSSTransition key={currentQuestion} timeout={1000} classNames={\"anim\"}>\r\n          <Grid\r\n            xs={10}\r\n            sm={6}\r\n            md={5}\r\n            lg={4}\r\n            item\r\n            container\r\n            className={classes.root}\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            {!testComplete &&\r\n              renderedQuestions &&\r\n              renderedQuestions[currentQuestion]}\r\n\r\n            {testComplete && (\r\n              <Box\r\n                justifyContent=\"space-around\"\r\n                alignItems=\"center\"\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                style={{ width: \"100%\", height: \"40vh\" }}\r\n              >\r\n                <Typography color=\"primary\" variant=\"h6\">\r\n                  Result:\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  {result}/{questions.length}\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Grid>\r\n        </CSSTransition>\r\n      </TransitionGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","H:\\Bootcamp_2020\\quiz-app\\src\\Components\\QuizModal\\styles.tsx",[],"H:\\Bootcamp_2020\\quiz-app\\src\\Components\\QuizModal\\SingleOption\\index.tsx",[],"H:\\Bootcamp_2020\\quiz-app\\src\\serviceWorkerRegistration.ts",[],"H:\\Bootcamp_2020\\quiz-app\\src\\Services\\firebaseService.ts",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":4,"column":10,"nodeType":"77","messageId":"78","endLine":4,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":35,"column":6,"nodeType":"81","endLine":35,"endColumn":8,"suggestions":"82"},{"ruleId":"75","severity":1,"message":"83","line":4,"column":3,"nodeType":"77","messageId":"78","endLine":4,"endColumn":19},{"ruleId":"75","severity":1,"message":"84","line":5,"column":3,"nodeType":"77","messageId":"78","endLine":5,"endColumn":13},{"ruleId":"85","severity":1,"message":"86","line":28,"column":25,"nodeType":"87","messageId":"88","endLine":28,"endColumn":27},{"ruleId":"79","severity":1,"message":"89","line":40,"column":6,"nodeType":"81","endLine":40,"endColumn":20,"suggestions":"90"},{"ruleId":"79","severity":1,"message":"91","line":86,"column":5,"nodeType":"81","endLine":86,"endColumn":16,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"@typescript-eslint/no-unused-vars","'Options' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["95"],"'SwitchTransition' is defined but never used.","'Transition' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'currentQuestion' and 'questions'. Either include them or remove the dependency array.",["96"],"React Hook useMemo has a missing dependency: 'classes.heading'. Either include it or remove the dependency array.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [history]",{"range":"104","text":"105"},"Update the dependencies array to be: [currentQuestion, pickedAnswer, questions]",{"range":"106","text":"107"},"Update the dependencies array to be: [classes.heading, questions]",{"range":"108","text":"109"},[1226,1228],"[history]",[1340,1354],"[currentQuestion, pickedAnswer, questions]",[2828,2839],"[classes.heading, questions]"]